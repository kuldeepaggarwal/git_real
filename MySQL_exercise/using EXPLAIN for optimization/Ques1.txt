QUESTION: What do different columns in the output of EXPLAIN mean? What possible values can those have? What is the meaning of those values ?

Follwing are the different columns in the output of EXPLAIN-

1. id-
The SELECT identifier. This is the sequential number of the SELECT within the query. 
The value can be NULL if the row refers to the union result of other rows. 


2. select_type-
following possible values-
SIMPLE-			Simple SELECT (not using UNION or subqueries)
PRIMARY-		Outermost SELECT
UNION-			Second or later SELECT statement in a UNION
DEPENDENT UNION-	Second or later SELECT statement in a UNION, dependent on outer query
UNION RESULT-		Result of a UNION.
SUBQUERY-		First SELECT in subquery
DEPENDENT SUBQUERY-	First SELECT in subquery, dependent on outer query
DERIVED-		Derived table SELECT (subquery in FROM clause)
UNCACHEABLE SUBQUERY-	A subquery for which the result cannot be cached and must be re-evaluated for each row of the outer query
UNCACHEABLE UNION-	The second or later select in a UNION that belongs to an uncacheable subquery (see UNCACHEABLE SUBQUERY)


3. table- 
The name of the table to which the row of output refers. This can also be one of the following values:
<unionM,N>: The row refers to the union of the rows with id values of M and N.
<derivedN>: The row refers to the derived table result for the row with an id value of N.


4. partitions-
The partitions from which records would be matched by the query. This column is displayed only if the PARTITIONS keyword is used. The value is NULL for nonpartitioned tables.


5. type-
The type column of EXPLAIN output describes how tables are joined. The following list describes the join types, ordered from the best type to the worst:
system : 	The table has only one row (= system table). This is a special case of the const join type.

const :		The table has at most one matching row, which is read at the start of the query. Because there is only one row, values from the column in this row can be regarded as constants by the rest of the optimizer.

eq_ref : 	One row is read from this table for each combination of rows from the previous tables. Other than the system and const types, this is the best possible join type. It is used when all parts of an index are used by the join and the index is a PRIMARY KEY or UNIQUE NOT NULL index.

ref :		All rows with matching index values are read from this table for each combination of rows from the previous tables.

fulltext:	The join is performed using a FULLTEXT index. 

index_merge :	This join type indicates that the Index Merge optimization is used. In this case, the key column in the output row contains a list of indexes used, and key_len contains a list of the longest key parts for the indexes used.

unique_subquery:This type replaces ref for some IN subqueries. unique_subquery is just an index lookup function that replaces the subquery completely for better efficiency.

index_subquery: This join type is similar to unique_subquery. It replaces IN subqueries, but it works for nonunique indexes.

range :		Only rows that are in a given range are retrieved, using an index to select the rows. The key column in the output row indicates which index is used. The key_len contains the longest key part that was used. The ref column is NULL for this type.

index :		The index join type is the same as ALL, except that the index tree is scanned. 

ALL : 		A full table scan is done for each combination of rows from the previous tables. This is normally not good if the table is the first table not marked const, and usually very bad in all other cases. Normally, you can avoid ALL by adding indexes that enable row retrieval from the table based on constant values or column values from earlier tables.


6. possible_keys- 
The possible_keys column indicates which indexes MySQL can choose from use to find the rows in this table. Note that this column is totally independent of the order of the tables as displayed in the output from EXPLAIN. That means that some of the keys in possible_keys might not be usable in practice with the generated table order.


7. key-
The key column indicates the key (index) that MySQL actually decided to use. If MySQL decides to use one of the possible_keys indexes to look up rows, that index is listed as the key value.
It is possible that key will name an index that is not present in the possible_keys value. This can happen if none of the possible_keys indexes are suitable for looking up rows, but all the columns selected by the query are columns of some other index.


8. key_len- 
The key_len column indicates the length of the key that MySQL decided to use. The length is NULL if the key column says NULL. Note that the value of key_len enables you to determine how many parts of a multiple-part key MySQL actually uses.


9. ref -
The ref column shows which columns or constants are compared to the index named in the key column to select rows from the table.


10.rows-
The rows column indicates the number of rows MySQL believes it must examine to execute the query.


11.extra-
This column contains additional information about how MySQL resolves the query. 


